checkIraceScenario(scenario)
scenario <- readScenario("scenario.txt")
checkIraceScenario(scenario)
scenario <- readScenario("scenario.txt")
checkIraceScenario(scenario)
scenario <- readScenario("scenario.txt")
checkIraceScenario(scenario)
scenario <- readScenario("scenario.txt")
checkIraceScenario(scenario)
scenario <- readScenario("scenario.txt")
checkIraceScenario(scenario)
scenario <- readScenario("scenario.txt")
checkIraceScenario(scenario)
scenario <- readScenario("scenario.txt")
checkIraceScenario(scenario)
# Graphique des variables (corrélations avec les axes)
fviz_mfa_var(res.mfa,
choice = "quanti.var",  # Variables quantitatives
axes = c(1, 2),  # Axes 1 et 2
geom = c("arrow", "text"),  # Flèches et texte
repel = TRUE,  # Éviter le chevauchement des étiquettes
title = "Corrélations des variables quantitatives avec les axes 1 et 2")
# Étape 1 : Installer et charger les packages nécessaires
if (!require("FactoMineR")) install.packages("FactoMineR")
if (!require("factoextra")) install.packages("factoextra")
library(FactoMineR)
library(factoextra)
# Étape 2 : Charger le dataset
# Remplace le chemin par le chemin réel de ton fichier data_clean.csv
wine <- read.csv("C:/Users/malle/OneDrive/Bureau/Traitement_Images/traitement_image/data_clean.csv")
# Étape 3 : Définir les features
features <- c("Type", "Age", "Breed1", "Breed2", "Gender", "Color1", "Color2", "Color3",
"MaturitySize", "FurLength", "Vaccinated", "Dewormed", "Sterilized", "Health", "PhotoAmt")
# Vérifier que toutes les features sont présentes dans le dataset
missing_features <- features[!features %in% colnames(wine)]
if (length(missing_features) > 0) {
stop(paste("Les features suivantes ne sont pas dans le dataset :", paste(missing_features, collapse=", ")))
}
# Sélectionner uniquement les features nécessaires
wine <- wine[, features]
# Étape 4 : Appliquer la MFA
res.mfa <- MFA(
wine,
group = c(2, 2, 5, 4, 2),  # Tailles des groupes
type = c("n", "n", "s", "s", "s"),  # Types des groupes
name.group = c("Identification", "Race", "Apparence", "Santé", "Caractéristiques numériques"),  # Noms des groupes
num.group.sup = 1,  # Groupe supplémentaire (Identification)
ncp = 5  # Nombre de composantes principales
)
# Étape 1 : Installer et charger les packages nécessaires
if (!require("FactoMineR")) install.packages("FactoMineR")
if (!require("factoextra")) install.packages("factoextra")
library(FactoMineR)
library(factoextra)
# Étape 2 : Charger le dataset
# Remplace le chemin par le chemin réel de ton fichier data_clean.csv
wine <- read.csv("C:/Users/malle/OneDrive/Bureau/Traitement_Images/traitement_image/data_clean.csv")
# Étape 3 : Définir les features
features <- c("Type", "Age", "Breed1", "Breed2", "Gender", "Color1", "Color2", "Color3",
"MaturitySize", "FurLength", "Vaccinated", "Dewormed", "Sterilized", "Health", "PhotoAmt")
# Vérifier que toutes les features sont présentes dans le dataset
missing_features <- features[!features %in% colnames(wine)]
if (length(missing_features) > 0) {
stop(paste("Les features suivantes ne sont pas dans le dataset :", paste(missing_features, collapse=", ")))
}
# Sélectionner uniquement les features nécessaires
wine <- wine[, features]
# Étape 3.5 : Convertir les variables qualitatives en facteurs
# Les variables des groupes "Identification" (Type, Gender) et "Race" (Breed1, Breed2) doivent être des facteurs
wine$Type <- as.factor(wine$Type)
wine$Gender <- as.factor(wine$Gender)
wine$Breed1 <- as.factor(wine$Breed1)
wine$Breed2 <- as.factor(wine$Breed2)
# Vérifier les types des variables (optionnel, pour débogage)
str(wine)
# Étape 4 : Appliquer la MFA
res.mfa <- MFA(
wine,
group = c(2, 2, 5, 4, 2),  # Tailles des groupes
type = c("n", "n", "s", "s", "s"),  # Types des groupes
name.group = c("Identification", "Race", "Apparence", "Santé", "Caractéristiques numériques"),  # Noms des groupes
num.group.sup = 1,  # Groupe supplémentaire (Identification)
ncp = 5  # Nombre de composantes principales
)
# Étape 1 : Installer et charger les packages nécessaires
if (!require("FactoMineR")) install.packages("FactoMineR")
if (!require("factoextra")) install.packages("factoextra")
library(FactoMineR)
library(factoextra)
# Étape 2 : Charger le dataset
wine <- read.csv("C:/Users/malle/OneDrive/Bureau/Traitement_Images/traitement_image/data_clean.csv")
# Étape 3 : Définir les features
features <- c("Type", "Age", "Breed1", "Breed2", "Gender", "Color1", "Color2", "Color3",
"MaturitySize", "FurLength", "Vaccinated", "Dewormed", "Sterilized", "Health", "PhotoAmt")
# Vérifier que toutes les features sont présentes dans le dataset
missing_features <- features[!features %in% colnames(wine)]
if (length(missing_features) > 0) {
stop(paste("Les features suivantes ne sont pas dans le dataset :", paste(missing_features, collapse=", ")))
}
# Sélectionner uniquement les features nécessaires
wine <- wine[, features]
# Étape 3.5 : Convertir les variables catégoriques en facteurs
# Variables des groupes qualitatifs (type="n")
wine$Type <- as.factor(wine$Type)
wine$Gender <- as.factor(wine$Gender)
wine$Breed1 <- as.factor(wine$Breed1)
wine$Breed2 <- as.factor(wine$Breed2)
wine$Color1 <- as.factor(wine$Color1)
wine$Color2 <- as.factor(wine$Color2)
wine$Color3 <- as.factor(wine$Color3)
wine$MaturitySize <- as.factor(wine$MaturitySize)
wine$FurLength <- as.factor(wine$FurLength)
wine$Vaccinated <- as.factor(wine$Vaccinated)
wine$Dewormed <- as.factor(wine$Dewormed)
wine$Sterilized <- as.factor(wine$Sterilized)
wine$Health <- as.factor(wine$Health)
# Vérifier les types des variables (optionnel, pour débogage)
str(wine)
# Étape 4 : Appliquer la MFA
res.mfa <- MFA(
wine,
group = c(2, 2, 5, 4, 2),  # Tailles des groupes
type = c("n", "n", "n", "n", "s"),  # Types des groupes
name.group = c("Identification", "Race", "Apparence", "Santé", "Caractéristiques numériques"),  # Noms des groupes
num.group.sup = 1,  # Groupe supplémentaire (Identification)
ncp = 5  # Nombre de composantes principales
)
# 1. Installer et charger les packages nécessaires
install.packages("FactoMineR")
install.packages("factoextra")
library(FactoMineR)
library(factoextra)
# 2. Charger les données
wine <- read.csv("C:/Users/malle/OneDrive/Bureau/Traitement_Images/traitement_image/data_clean.csv")
# Afficher les premières lignes des données
head(wine)
# 3. Définir les variables qualitatives et quantitatives
qualitative_features <- c('Type', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2', 'Color3',
'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed', 'Sterilized', 'Health')
quantitative_features <- c('Age', 'PhotoAmt')  # Vous pouvez ajouter d'autres variables quantitatives ici si nécessaire
# Créer des dataframes séparés pour les variables qualitatives et quantitatives
df_qualitative <- wine[, qualitative_features]
df_quantitative <- wine[, quantitative_features]
# 4. Appliquer l'Analyse Factorielle Multiple (AFM)
# Définir les tailles des groupes (par exemple, 13 variables qualitatives et 2 quantitatives)
group_sizes <- c(length(qualitative_features), length(quantitative_features))
# Effectuer l'AFM
res.mfa <- MFA(wine,
group = group_sizes,
type = c(rep("s", length(qualitative_features)), rep("n", length(quantitative_features))),
ncp = 5,
name.group = c("Qualitative", "Quantitative"),
num.group.sup = NULL)  # Pas de groupe supplémentaire
# 1. Installer et charger les packages nécessaires
install.packages("FactoMineR")
install.packages("factoextra")
library(FactoMineR)
library(factoextra)
# 2. Charger les données
wine <- read.csv("C:/Users/malle/OneDrive/Bureau/Traitement_Images/traitement_image/data_clean.csv")
# Afficher les premières lignes des données
head(wine)
# 3. Définir les variables qualitatives et quantitatives
qualitative_features <- c('Type', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2', 'Color3',
'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed', 'Sterilized', 'Health')
quantitative_features <- c('Age', 'PhotoAmt')  # Vous pouvez ajouter d'autres variables quantitatives ici si nécessaire
# Créer des dataframes séparés pour les variables qualitatives et quantitatives
df_qualitative <- wine[, qualitative_features]
df_quantitative <- wine[, quantitative_features]
# 4. Appliquer l'Analyse Factorielle Multiple (AFM)
# Définir les tailles des groupes (par exemple, 13 variables qualitatives et 2 quantitatives)
group_sizes <- c(length(qualitative_features), length(quantitative_features))
# Effectuer l'AFM
res.mfa <- MFA(wine,
group = group_sizes,
type = c(rep("s", length(qualitative_features)), rep("n", length(quantitative_features))),
ncp = 5,
name.group = c("Qualitative", "Quantitative"),
num.group.sup = NULL)  # Pas de groupe supplémentaire
# 1. Installer et charger les packages nécessaires
install.packages("FactoMineR")
install.packages("factoextra")
library(FactoMineR)
library(factoextra)
# 2. Charger les données (Remplacez le chemin par votre propre chemin de fichier)
wine <- read.csv("C:/Users/malle/OneDrive/Bureau/Traitement_Images/traitement_image/data_clean.csv")
# Afficher les premières lignes des données pour vérifier
head(wine)
# 3. Définir les variables qualitatives et quantitatives (ajustez selon vos besoins)
qualitative_features <- c('Type', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2', 'Color3',
'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed', 'Sterilized', 'Health')
quantitative_features <- c('Age', 'PhotoAmt')  # Ajoutez ici d'autres variables quantitatives
# Créer des dataframes séparés pour les variables qualitatives et quantitatives
df_qualitative <- wine[, qualitative_features]
df_quantitative <- wine[, quantitative_features]
# 4. Définir des groupes similaires pour les variables
# Par exemple, on pourrait diviser les variables qualitatives en groupes logiques et les quantitatives aussi en groupes.
group_sizes <- c(6, 7, 2)  # On crée 3 groupes : un pour 'Type' + 'Breed1' + 'Breed2', un autre pour 'Color' + 'Health', et un dernier pour 'Vaccinated', etc.
# 5. Définir les types de variables : 's' pour qualitative et 'n' pour quantitative
type <- c(rep("s", 6), rep("s", 7), rep("n", 2))  # Exemple avec 2 groupes qualitatifs et 2 quantitatifs
# 6. Appliquer l'Analyse Factorielle Multiple (AFM) avec ces groupes définis
res.mfa <- MFA(wine,
group = group_sizes,  # Taille des groupes
type = type,  # Type de variable ('s' pour qualitative, 'n' pour quantitative)
ncp = 5,  # Nombre de composantes principales à conserver
name.group = c("Group1", "Group2", "Group3"),  # Noms des groupes
num.group.sup = NULL)  # Aucun groupe supplémentaire
# 1. Installer et charger les packages nécessaires
install.packages("FactoMineR")
install.packages("factoextra")
library(FactoMineR)
library(factoextra)
# 2. Charger les données (Remplacez le chemin par votre propre chemin de fichier)
wine <- read.csv("C:/Users/malle/OneDrive/Bureau/Traitement_Images/traitement_image/data_clean.csv")
# Afficher les premières lignes des données pour vérifier
head(wine)
# 3. Définir les variables qualitatives et quantitatives (ajustez selon vos besoins)
qualitative_features <- c('Type', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2', 'Color3',
'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed', 'Sterilized', 'Health')
quantitative_features <- c('Age', 'PhotoAmt')  # Ajoutez ici d'autres variables quantitatives
# Créer des dataframes séparés pour les variables qualitatives et quantitatives
df_qualitative <- wine[, qualitative_features]
df_quantitative <- wine[, quantitative_features]
# 4. Définir des groupes similaires pour les variables
# Par exemple, on pourrait diviser les variables qualitatives en groupes logiques et les quantitatives aussi en groupes.
group_sizes <- c(6, 7, 2)  # On crée 3 groupes : un pour 'Type' + 'Breed1' + 'Breed2', un autre pour 'Color' + 'Health', et un dernier pour 'Vaccinated', etc.
# 5. Définir les types de variables : 's' pour qualitative et 'n' pour quantitative
type <- c(rep("s", 6), rep("s", 7), rep("n", 2))  # Exemple avec 2 groupes qualitatifs et 2 quantitatifs
# 6. Appliquer l'Analyse Factorielle Multiple (AFM) avec ces groupes définis
res.mfa <- MFA(wine,
group = group_sizes,  # Taille des groupes
type = type,  # Type de variable ('s' pour qualitative, 'n' pour quantitative)
ncp = 5,  # Nombre de composantes principales à conserver
name.group = c("Group1", "Group2", "Group3"),  # Noms des groupes
num.group.sup = NULL)  # Aucun groupe supplémentaire
# 1. Installer et charger les packages nécessaires
install.packages("FactoMineR")
install.packages("factoextra")
library(FactoMineR)
library(factoextra)
# 2. Charger les données (remplacez le chemin par votre propre chemin de fichier)
wine <- read.csv("C:/Users/malle/OneDrive/Bureau/Traitement_Images/traitement_image/data_clean.csv")
# 3. Définir les variables qualitatives et quantitatives
qualitative_features <- c('Type', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2', 'Color3',
'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed', 'Sterilized', 'Health')
quantitative_features <- c('Age', 'PhotoAmt')  # Variables quantitatives
# Créer un dataframe pour les variables qualitatives et quantitatives
df_qualitative <- wine[, qualitative_features]
df_quantitative <- wine[, quantitative_features]
# 4. Définir des groupes
group_sizes <- c(length(qualitative_features), length(quantitative_features))  # Un groupe pour les qualitatives et un pour les quantitatives
# 5. Définir les types des variables : 's' pour qualitatives et 'n' pour quantitatives
type <- c(rep("s", length(qualitative_features)), rep("n", length(quantitative_features)))
# 6. Appliquer l'Analyse Factorielle Multiple (AFM)
res.mfa <- MFA(wine,
group = group_sizes,  # Définir les groupes
type = type,  # Spécifier les types de variables
ncp = 5,  # Nombre de composantes principales à conserver
name.group = c("Qualitative", "Quantitative"),  # Noms des groupes
num.group.sup = NULL)  # Aucun groupe supplémentaire
# 1. Charger les packages nécessaires
install.packages("FactoMineR")
install.packages("factoextra")
library(FactoMineR)
library(factoextra)
# 2. Charger les données (remplacez le chemin par votre propre chemin de fichier)
wine <- read.csv("C:/Users/malle/OneDrive/Bureau/Traitement_Images/traitement_image/data_clean.csv")
# 3. Définir des groupes simples : ici, on va juste prendre toutes les variables en un seul groupe
group_sizes <- c(ncol(wine))  # Toutes les variables dans un seul groupe
# 4. Définir le type des variables : ici, on peut utiliser "s" pour toutes les variables comme un groupe
type <- rep("s", ncol(wine))  # Nous traitons toutes les variables comme qualitatives pour simplification
# 5. Appliquer l'Analyse Factorielle Multiple (AFM) avec un groupe simple
res.mfa <- MFA(wine,
group = group_sizes,  # Un groupe avec toutes les variables
type = type,  # Traitement des variables comme qualitatives
ncp = 5,  # Nombre de composantes principales à conserver
name.group = c("All Variables"),  # Nom du groupe
num.group.sup = NULL)  # Aucun groupe supplémentaire
# 1. Charger les packages nécessaires
install.packages("FactoMineR")
install.packages("factoextra")
library(FactoMineR)
library(factoextra)
# 2. Charger les données (remplacez le chemin par votre propre chemin de fichier)
wine <- read.csv("C:/Users/malle/OneDrive/Bureau/Traitement_Images/traitement_image/data_clean.csv")
# 3. Définir les tailles des groupes
# Supposons que vous ayez 10 variables qualitatives et 5 quantitatives
group_sizes <- c(10, 5)  # Exemple : 10 variables qualitatives, 5 quantitatives
# 4. Définir le type des variables :
# "s" pour qualitatives et "n" pour quantitatives
type <- c(rep("s", 10), rep("n", 5))  # 10 variables qualitatives et 5 quantitatives
# 5. Appliquer l'Analyse Factorielle Multiple (AFM) avec des groupes simples
res.mfa <- MFA(wine,
group = group_sizes,  # Taille des groupes
type = type,  # Type des variables : 's' pour qualitatives, 'n' pour quantitatives
ncp = 5,  # Nombre de composantes principales à conserver
name.group = c("Qualitative", "Quantitative"),  # Nom des groupes
num.group.sup = NULL)  # Aucun groupe supplémentaire
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
# Charger les bibliothèques nécessaires
library(FactoMineR)  # Pour l'Analyse des Facteurs Multiples (AFM)
library(factoextra)   # Pour la visualisation des résultats
# 1. Création des données avec plus d'observations (n=20 pour plus de stabilité)
set.seed(123)  # Assurer la reproductibilité des résultats
data <- data.frame(
Type = factor(rep(c("A", "B"), each=10)),  # 2 niveaux pour la variable catégorielle Type
Gender = factor(rep(c("Male", "Female"), 10)),  # 2 niveaux pour la variable catégorielle Gender
Age = round(rnorm(20, mean=35, sd=10)),  # Variable quantitative Age, moyenne=35, écart-type=10
Income = round(rnorm(20, mean=50000, sd=10000))  # Variable quantitative Income, moyenne=50000, écart-type=10000
)
# 2. Vérification de la structure des données
str(data)
# 3. Configuration CORRECTE de l'AFM :
# On crée deux groupes :
# - Groupe 1 (catégoriel) : Type + Gender (2 variables)
# - Groupe 2 (quantitatif) : Age + Income (2 variables)
res.mfa <- MFA(data,
group = c(2, 2),  # 2 variables catégorielles, puis 2 quantitatives
type = c("n", "s"),  # "n" pour le 1er groupe (catégoriel), "s" pour le 2nd (quantitatif)
ncp = 2,  # Nombre de composantes principales à extraire
name.group = c("Catégorielles", "Quantitatives"),  # Nom des groupes
graph = FALSE)  # Désactiver l'affichage automatique des graphiques
# 4. Visualisation des résultats des variables dans l'AFM
fviz_mfa_var(res.mfa, repel = TRUE) +  # Afficher les variables avec des labels repoussés pour éviter les chevauchements
ggtitle("Analyse des variables dans l'AFM")  # Titre du graphique
# 5. Visualisation des individus par groupe "Type"
fviz_mfa_ind(res.mfa,
habillage = "Type",  # Habillage selon la variable "Type"
addEllipses = TRUE) +  # Ajouter des ellipses pour chaque groupe (A et B)
ggtitle("Positionnement des individus par Type")  # Titre du graphique
# Charger les bibliothèques nécessaires
library(FactoMineR)  # Pour l'Analyse des Facteurs Multiples (AFM)
library(factoextra)   # Pour la visualisation des résultats
# 1. Création des données avec plus d'observations (n=20 pour plus de stabilité)
set.seed(123)  # Assurer la reproductibilité des résultats
data <- data.frame(
Type = factor(rep(c("A", "B"), each=10)),  # 2 niveaux pour la variable catégorielle Type
Gender = factor(rep(c("Male", "Female"), 10)),  # 2 niveaux pour la variable catégorielle Gender
Age = round(rnorm(20, mean=35, sd=10)),  # Variable quantitative Age, moyenne=35, écart-type=10
Income = round(rnorm(20, mean=50000, sd=10000)),  # Variable quantitative Income, moyenne=50000, écart-type=10000
ID = paste0("Ind", 1:20)  # Ajouter une colonne d'identifiants pour les individus (Ind1, Ind2, ..., Ind20)
)
# 2. Vérification de la structure des données
str(data)
# 3. Configuration CORRECTE de l'AFM :
# On crée deux groupes :
# - Groupe 1 (catégoriel) : Type + Gender (2 variables)
# - Groupe 2 (quantitatif) : Age + Income (2 variables)
res.mfa <- MFA(data[, c("Type", "Gender", "Age", "Income")],  # Exclure la colonne ID de l'analyse
group = c(2, 2),  # 2 variables catégorielles, puis 2 quantitatives
type = c("n", "s"),  # "n" pour le 1er groupe (catégoriel), "s" pour le 2nd (quantitatif)
ncp = 2,  # Nombre de composantes principales à extraire
name.group = c("Catégorielles", "Quantitatives"),  # Nom des groupes
graph = FALSE)  # Désactiver l'affichage automatique des graphiques
# 4. Visualisation des individus avec étiquettes et ellipses
fviz_mfa_ind(res.mfa,
habillage = "Type",  # Colorer selon la variable "Type"
addEllipses = TRUE,  # Ajouter des ellipses pour chaque groupe (A et B)
ellipse.type = "confidence",  # Type d'ellipse (confiance)
label = "all",  # Afficher les étiquettes des individus
repel = TRUE,  # Éviter le chevauchement des étiquettes
geom = "point",  # Afficher les points pour les individus
pointsize = 3,  # Taille des points
palette = c("red", "blue"),  # Couleurs pour les groupes A et B
linetype = c("solid", "dashed"),  # Styles de lignes pour les ellipses (comme dans ton graphique)
title = "Individual factor map",  # Titre du graphique
xlab = paste0("Dim 1 (", round(res.mfa$eig[1, 2], 2), "%)"),  # Étiquette de l'axe X avec % de variance
ylab = paste0("Dim 2 (", round(res.mfa$eig[2, 2], 2), "%)")) +  # Étiquette de l'axe Y avec % de variance
theme_minimal()  # Thème minimal pour un rendu propre
# Charger les bibliothèques nécessaires
library(FactoMineR)  # Pour l'Analyse des Facteurs Multiples (AFM)
library(factoextra)   # Pour la visualisation des résultats
library(ggplot2)      # Pour personnaliser les graphiques
# 1. Création des données avec plus d'observations (n=20 pour plus de stabilité)
set.seed(123)  # Assurer la reproductibilité des résultats
data <- data.frame(
Type = factor(rep(c("A", "B"), each=10)),  # 2 niveaux pour la variable catégorielle Type
Gender = factor(rep(c("Male", "Female"), 10)),  # 2 niveaux pour la variable catégorielle Gender
Age = round(rnorm(20, mean=35, sd=10)),  # Variable quantitative Age, moyenne=35, écart-type=10
Income = round(rnorm(20, mean=50000, sd=10000)),  # Variable quantitative Income, moyenne=50000, écart-type=10000
ID = paste0("Ind", 1:20)  # Ajouter une colonne d'identifiants pour les individus (Ind1, Ind2, ..., Ind20)
)
# 2. Vérification de la structure des données
str(data)
# 3. Configuration CORRECTE de l'AFM :
# On crée deux groupes :
# - Groupe 1 (catégoriel) : Type + Gender (2 variables)
# - Groupe 2 (quantitatif) : Age + Income (2 variables)
res.mfa <- MFA(data[, c("Type", "Gender", "Age", "Income")],  # Exclure la colonne ID de l'analyse
group = c(2, 2),  # 2 variables catégorielles, puis 2 quantitatives
type = c("n", "s"),  # "n" pour le 1er groupe (catégoriel), "s" pour le 2nd (quantitatif)
ncp = 2,  # Nombre de composantes principales à extraire
name.group = c("Catégorielles", "Quantitatives"),  # Nom des groupes
graph = FALSE)  # Désactiver l'affichage automatique des graphiques
# 4. Visualisation des individus avec étiquettes et ellipses
p <- fviz_mfa_ind(res.mfa,
habillage = "Type",  # Colorer selon la variable "Type"
addEllipses = TRUE,  # Ajouter des ellipses pour chaque groupe (A et B)
ellipse.type = "confidence",  # Type d'ellipse (confiance)
label = "all",  # Afficher les étiquettes des individus
repel = TRUE,  # Éviter le chevauchement des étiquettes
geom = "point",  # Afficher les points pour les individus
pointsize = 3,  # Taille des points
palette = c("red", "blue"),  # Couleurs pour les groupes A et B
title = "Individual factor map",  # Titre du graphique
xlab = paste0("Dim 1 (", round(res.mfa$eig[1, 2], 2), "%)"),  # Étiquette de l'axe X avec % de variance
ylab = paste0("Dim 2 (", round(res.mfa$eig[2, 2], 2), "%)")) +  # Étiquette de l'axe Y avec % de variance
theme_minimal()  # Thème minimal pour un rendu propre
# 5. Personnaliser les styles des ellipses avec ggplot2
p <- p + scale_linetype_manual(values = c("solid", "dashed"))  # Styles de lignes pour les ellipses
# Afficher le graphique
print(p)
# 6. (Optionnel) Visualisation des variables dans l'AFM
fviz_mfa_var(res.mfa,
repel = TRUE,  # Éviter le chevauchement des étiquettes
title = "Analyse des variables dans l'AFM")  # Titre du graphique
# Charger les bibliothèques nécessaires
library(FactoMineR)  # Pour l'Analyse des Facteurs Multiples (AFM)
library(factoextra)   # Pour la visualisation des résultats
library(ggplot2)      # Pour personnaliser les graphiques
# 1. Création des données avec plus d'observations (n=20 pour plus de stabilité)
set.seed(123)  # Assurer la reproductibilité des résultats
data <- data.frame(
Type = factor(rep(c("A", "B"), each=10)),  # 2 niveaux pour la variable catégorielle Type
Gender = factor(rep(c("Male", "Female"), 10)),  # 2 niveaux pour la variable catégorielle Gender
Age = round(rnorm(20, mean=35, sd=10)),  # Variable quantitative Age, moyenne=35, écart-type=10
Income = round(rnorm(20, mean=50000, sd=10000)),  # Variable quantitative Income, moyenne=50000, écart-type=10000
ID = paste0("Ind", 1:20)  # Ajouter une colonne d'identifiants pour les individus (Ind1, Ind2, ..., Ind20)
)
# 2. Vérification de la structure des données
str(data)
# 3. Configuration CORRECTE de l'AFM :
# On crée deux groupes :
# - Groupe 1 (catégoriel) : Type + Gender (2 variables)
# - Groupe 2 (quantitatif) : Age + Income (2 variables)
res.mfa <- MFA(data[, c("Type", "Gender", "Age", "Income")],  # Exclure la colonne ID de l'analyse
group = c(2, 2),  # 2 variables catégorielles, puis 2 quantitatives
type = c("n", "s"),  # "n" pour le 1er groupe (catégoriel), "s" pour le 2nd (quantitatif)
ncp = 2,  # Nombre de composantes principales à extraire
name.group = c("Catégorielles", "Quantitatives"),  # Nom des groupes
graph = FALSE)  # Désactiver l'affichage automatique des graphiques
# 4. Visualisation des individus avec étiquettes et ellipses
p <- fviz_mfa_ind(res.mfa,
habillage = "Type",  # Colorer selon la variable "Type"
addEllipses = TRUE,  # Ajouter des ellipses pour chaque groupe (A et B)
ellipse.type = "confidence",  # Type d'ellipse (confiance)
label = "all",  # Afficher les étiquettes des individus
repel = TRUE,  # Éviter le chevauchement des étiquettes
geom = "point",  # Afficher les points pour les individus
pointsize = 3,  # Taille des points
palette = c("red", "blue"),  # Couleurs pour les groupes A et B
title = "Individual factor map",  # Titre du graphique
xlab = paste0("Dim 1 (", round(res.mfa$eig[1, 2], 2), "%)"),  # Étiquette de l'axe X avec % de variance
ylab = paste0("Dim 2 (", round(res.mfa$eig[2, 2], 2), "%)")) +  # Étiquette de l'axe Y avec % de variance
theme_minimal()  # Thème minimal pour un rendu propre
# Personnaliser les styles des ellipses avec ggplot2
p <- p + scale_linetype_manual(values = c("solid", "dashed"))  # Styles de lignes pour les ellipses
# Afficher le graphique des individus
print(p)
# 5. Visualisation des variables qualitatives (modalités de Type et Gender)
fviz_mfa_var(res.mfa,
choice = "quali.var",  # Visualiser les variables qualitatives (modalités)
repel = TRUE,  # Éviter le chevauchement des étiquettes
col.var = "darkgreen",  # Couleur des modalités
title = "Positionnement des modalités des variables qualitatives") +
theme_minimal()
# 6. (Optionnel) Graphique combiné : Individus + Modalités qualitatives
fviz_mfa(res.mfa,
choice = c("ind", "quali.var"),  # Afficher les individus et les modalités qualitatives
habillage = "Type",  # Colorer les individus selon "Type"
addEllipses = TRUE,  # Ajouter des ellipses pour les groupes A et B
ellipse.type = "confidence",  # Type d'ellipse (confiance)
palette = c("red", "blue"),  # Couleurs pour les groupes A et B
col.var = "darkgreen",  # Couleur des modalités qualitatives
repel = TRUE,  # Éviter le chevauchement des étiquettes
title = "Individus et modalités des variables qualitatives") +
scale_linetype_manual(values = c("solid", "dashed")) +  # Styles de lignes pour les ellipses
theme_minimal()
library(knitr) # pour générer la table ci-dessous
library(profileR) # pour extraire les données IPMMc
# Chargement des bibliothèques nécessaires
library(knitr)       # Pour générer des tableaux jolis
library(profileR)    # Pour accéder aux données IPMMc
install.packages("profileR")
# Chargement des bibliothèques nécessaires
library(knitr)       # Pour générer des tableaux jolis
library(profileR)    # Pour accéder aux données IPMMc
library(dplyr)       # Pour utiliser la fonction recode_factor
# Renommer les colonnes pour plus de clarté
colnames(IPMMc) <- c("Anxiete", "Hypochondrie", "Schizophrenie", "Bipolaire", "Pole_nevrose")
# Renommer les modalités de la variable Pole_nevrose
IPMMc$Pole_nevrose <- recode_factor(IPMMc$Pole_nevrose, `1` = "Nevrose", `0` = "Psychose")
# Afficher le tableau modifié
kable(IPMMc, caption = "Jeu de données Personnalité et Humeur (QUANTI)", row.names = TRUE)
library(FactoMineR)
# graphe 1 : nom => carte factorielle / graphe des individus,
# graphe 2 : nom => cercle des corrélations / graphe des variables
res.pca <- PCA(IPMMc, quali.sup = 5)
# classification
hc.pca <- HCPC(res.pca, nb.clust=3) #Si nb.clust = -1 : laisser le programme décider du nombre optimal de clusters.
library(knitr)
library(profileR)
kable(interest[1:5,1:7], caption ="Jeu de données interest")
library(profileR)
data("interest")
interest$gender<- as.factor(interest$gender)
# Renommer le genre pour plus de clarté
levels(interest$gender) <- c("F","H")
summary(interest[1:15]) # ne garder que les 15 variables du début (plus pertinentes ici)
